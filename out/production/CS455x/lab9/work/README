Question 1.1 The TreeMap inside Concord keeps the entries in order. Why can't we just use its iterator or a for-each
    loop to visit the values in order? (Hint: there's iterator code like this in the print method of Concord.)
TreeMap is sorted according to the keys

Question 2.1 Report to the TA five of the most frequently occurring words in the English language based on what you
    find in the results. (It doesn't have to be the absolute top five words.)
the, I, and, of, to

Question 2.2 For each file report to the TA the most frequently occurring word in that file that is not one of the
    most frequently occurring words in the English language. For each of your answers, tell why it occurs so frequently
    in this file.
melville: bartleby (118 times) Because it is the name of the main character
poe: amontillado (17 times) Because it is the name of the wine the characters discussed

Question 2.3 In what order do words that have the same frequency appear in your output? (Look at the last part of your
    output file to see many examples of this.) Why? (Hint: look at the documentation of the sort method you called.)
    Would they be in a different order if we had used a HashMap?
Alphabetical order. They were arranged in alphabetical order in TreeMap, and equal elements will not be reordered by
the sort method. Yes, the words appeared first will come first.

Question 3.1 Why don't we need to save the LargeWordPred object in a variable (second call above)?
It is used only once, as an argument for printSatisfying().

Question 3.2 Using your results from your code and experiments above, answer the following questions: What are the
    longest non-hyphenated words occurring in each of melville.txt and poe.txt, how long are they, and how many times
    did each of them occur in the original file? (Note: there may be multiple words that are the longest.)
melville: unreasonableness (16 chars, 1 time), obstreperousness (16 chars, 1 time)
poe: connoisseurship (15 chars, 1 time)
