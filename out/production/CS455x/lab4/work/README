Name: Xinyu Wu (Scribe), Qichen Wang (Driver)
USC NetID: xwu26173      qichenwa
CSCI 455 Fall 2022
Lab 4

Note: On-campus students can put their answers to the lab questions in this file, or use a piece of paper they can show to their lab TA.  DEN students will need to put their answers in this README, so they will get submitted.

1.1   If we implement the whole class without testing the parts, we will have trouble finding
      bugs when we see errors. We would be wasting our time locating the problems. On the other
      hand, if we build our program incrementally, we would be able to find and solve any
      problems at once and save time.
2.1   nums.in: -17
      test1.in:
      test2.in:
2.2   (2147483647), (2147483647 2147483647)
3.1   nums.in: 10  (17 17 21 18)
               -20 (3 -7 10 17 9 -17 17 21 18 7)
               -17 (3 -7 10 17 9 17 21 18 7)
               21  ()
      test1.in: 10
                -20
                -17
                21
      test2.in: 10
                -20
                -17
                21
3.2   10  (21)
      -20 (10 -17 21)
      -17 (10 21)
      21  ()
4.1   (1) while (in.hasNextInt()) { ... }
      (2) end = false;
          do {
             ...
             if (!in.hasNextInt()) {
                end = true
             }
          }
          while (!end)
4.2   (nums.valuesGT(threshold)).printVals();
4.3   Nums
4.4   Nums nums2 = nums.valuesGT(threshold);
      nums2.printVals();
4.5   The syntax are more complicated.
4.6   We don't need to care about the number of inputs, and adding numbers to the sequence
      is much easier with an ArrayList.
4.7   (1) Not necessary. We can read a value and print it, one at a time.
      (2) Not necessary. We can store the minimum in a variable and compare the minimum to
          each input value one by one.
      (3) Not necessary. With a while loop, we can print the value and compare it to the
          minimum at the same time. For example,

          min = Integer.MAX_VALUE;
          while (in.hasNextInt()) {
             int current = in.nextInt();
             System.out.print(current + " ");
             if (current < min) {
                min = current;
             }
          }
          System.out.println();
          System.out.print(min);
      (4) Not necessary. We can compare each value to the threshold and print those that
          are larger.
      (5) Necessary. We need to store the numbers read in in an array before we compare
          each one to the threshold.
      (6) Necessary. Since we print the list of original numbers twice, we have to store
          it in an array.